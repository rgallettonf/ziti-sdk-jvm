/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.openziti.zeds;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetAddress;
import java.security.KeyStore;
import java.util.Properties;
import java.util.Scanner;

import org.openziti.ZitiContext.Status;
import org.openziti.Ziti;
import org.openziti.ZitiContext;
import org.openziti.identity.Enroller;

import kotlinx.coroutines.flow.*;

/**
 * Sample program to demonstrate `seamless` SDK usage.
 */
public class HelloZiggyEnroll {

	static final String TOKEN_EXT = ".jwt";
	static final String IDENTITY_EXT = ".ident";

    public static void run() {
        try {
        	Properties props = readProperties();
        	String identityDirectory = props.getProperty("zeds.identity.dir");
        	String identityName = props.getProperty("zeds.identity.name");
        	String jwt = readTokenFile(identityDirectory, identityName);
            enrollIdentity(jwt, identityDirectory, identityName);
            verifyIdentity(identityDirectory, identityName);
            System.out.println("Identity enrolled!");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        System.exit(0);
    }

    public static Properties readProperties() throws Exception {
    	Properties prop = new Properties();
    	String fileName = "../resources/main/hello-ziggy.properties";
    	FileInputStream fis = new FileInputStream(fileName);
	    prop.load(fis);
    	return prop;
    }

    public static String readTokenFile(String identityDirectory, String identityName) throws FileNotFoundException {
    	String jwt = "";
    	String filePath = identityDirectory + identityName + TOKEN_EXT;
        File myObj = new File(filePath);
        Scanner myReader = new Scanner(myObj);
        while (myReader.hasNextLine()) {
        	String data = myReader.nextLine();
        	jwt += data;
        }
        myReader.close();
        return jwt;
    }

   public static void enrollIdentity(String jwt, String identityDirectory, String identityName) {
	   Enroller enroller = Enroller.fromJWT(jwt);
	   String filePath = identityDirectory + identityName + IDENTITY_EXT;
	   OutputStream out = null;
	   try {
		   File file = new File(filePath);
		   out = new FileOutputStream(file);
		   KeyStore store = KeyStore.getInstance("PKCS12");
		   store.load(null);
		   InetAddress address = InetAddress.getLocalHost();
		   String hostName = address.getHostName();
	       enroller.enroll(null, store, hostName);
	       store.store(out, "".toCharArray());
	   } catch (Exception e) {
           System.out.println("Error enrolling identity");
           e.printStackTrace();
	   } finally {
           if (out != null) {
        	   try {
        		   out.close();
        	   } catch (Exception e) {
        		   e.printStackTrace();
        	   }
           }
	   }
   }

   public static void verifyIdentity(String identityDirectory, String identityName) {
	   try {
		   String filePath = identityDirectory + identityName + IDENTITY_EXT;
		   File idFile = new File(filePath);
		   ZitiContext ztx = Ziti.newContext(idFile, new char[0]);
		   MutableStateFlow<Status> zitiState = (MutableStateFlow<Status>) ztx.statusUpdates();

		   while (zitiState != null) {
			    Status status = (Status)zitiState.getValue();
			    if (status instanceof Status.Active) {
			    	System.out.println("verification success!");
			    	break;
			    } else if (status instanceof Status.NotAuthorized) {
			    	System.out.println("verification failed");
			    	break;
			    } else if (status instanceof Status.Loading) {
			    	continue;
			    } else {
			    	System.out.println("unexpected status recieved");
			    	break;
			    }
			}
	   } catch (Exception e) {
           System.out.println("Error verifying identity");
           e.printStackTrace();
	   }
   }
}
